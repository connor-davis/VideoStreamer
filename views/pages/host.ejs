<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('../partials/head'); %>
</head>

<body class="flex flex-col w-screen h-screen bg-gray-100">
    <div class="flex flex-col w-full h-full justify-center items-center">
        <div class="flex flex-col space-y-10 justify-center bg-white rounded-md shadow-lg shadow-gray-300 p-5" id="hostWelcomeScreen">
            <div class="flex flex-col space-y-2">
                <h1 class="flex flex-col w-full h-full justify-center items-center text-gray-900 text-9xl font-bold md:text-2xl">Welcome Host</h1>
                <div class="text-center text-gray-400">Please copy the session id below and click start session.</div>
            </div>

            <div class="flex flex-col justify-center space-y-4">
                <div class="flex space-x-3 justify-center items-center w-full h-auto p-2 bg-gray-300 rounded-md cursor-pointer" onclick="copySessionId()" id="sessionIdCopyButton">
                    <div id="sessionId"></div>
                    <div id="sessionIdCopyIcon">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2" />
                        </svg>
                    </div>
                </div>

                <select name="videoSelector" id="videoSelector">
                </select>

                <div class="w-full h-auto bg-blue-500 text-white shadow-lg shadow-blue-500 py-3 px-4 rounded-md text-center cursor-pointer" onclick={startSession()}>Start Session</div>
                <input type="file" name="fileInput" id="fileInput" class="hidden">
            </div>
        </div>

        <div class="flex-col w-full h-full items-center bg-black hidden" id="hostVideoScreen">
            <div class="absolute flex flex-col w-full h-full p-5 space-y-2 overflow-hidden">
                <div class="flex flex-col justify-center items-center w-10 h-10 fill-blue-500 text-blue-500 rounded-full z-10 cursor-pointer" onclick="toggleChat()">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
                    </svg>
                </div>
                <div class="relative flex-col w-full md:w-1/5 h-auto hidden" id="chatBox">
                    <div class="absolute w-full h-full rounded-md bg-gray-900 opacity-30"></div>
                    <div class="flex flex-col w-full h-full bg-transparent p-3 z-20">
                        <div class="flex items-center w-full space-x-2">
                            <div class="text-white">Chat</div>
                            <input type="text" id="nicknameInput" class="z-50 bg-transparent rounded-md outline-none w-full border-1 border-gray-900 text-white" placeholder="Enter nickname">
                        </div>
                        <div class="flex flex-col w-full h-96 py-3 space-y-1 overflow-y-auto" id="messageList"></div>
                        <div class="flex items-center w-full h-15 space-x-2">
                            <input type="text" id="messageInput" class="z-50 bg-transparent rounded-md outline-none w-full border-1 border-gray-900 text-white" placeholder="Enter message">
                            <button id="sendMessageButton" class="bg-blue-500 rounded-md px-3 py-2 z-50" onclick="sendMessage()">Send</button>
                        </div>
                    </div>
                </div>
            </div>
            <video id="videoPlayer" class="w-full h-full" onclick="toggleNavBar()"></video>
            <div class="absolute flex space-x-5 items-center left-5 right-5 bottom-5 h-auto p-5 bg-transparent rounded-md" id="hostNavBar">
                <div class="flex w-auto h-full space-x-2">
                    <div class="fill-blue-500 cursor-pointer" onclick="playVideo()" id="playVideoButton">
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="Layer_1" style="enable-background:new 0 0 512 512;" version="1.1" viewBox="0 0 512 512" xml:space="preserve" class="w-6 h-6">
                            <path d="M405.2,232.9L126.8,67.2c-3.4-2-6.9-3.2-10.9-3.2c-10.9,0-19.8,9-19.8,20H96v344h0.1c0,11,8.9,20,19.8,20  c4.1,0,7.5-1.4,11.2-3.4l278.1-165.5c6.6-5.5,10.8-13.8,10.8-23.1C416,246.7,411.8,238.5,405.2,232.9z" />
                        </svg>
                    </div>
                    <div class="fill-blue-500 cursor-pointer hidden" onclick="pauseVideo()" id="pauseVideoButton">
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="Layer_1" style="enable-background:new 0 0 512 512;" version="1.1" viewBox="0 0 512 512" class="w-6 h-6" xml:space="preserve">
                            <g>
                                <path d="M224,435.8V76.1c0-6.7-5.4-12.1-12.2-12.1h-71.6c-6.8,0-12.2,5.4-12.2,12.1v359.7c0,6.7,5.4,12.2,12.2,12.2h71.6   C218.6,448,224,442.6,224,435.8z" />
                                <path d="M371.8,64h-71.6c-6.7,0-12.2,5.4-12.2,12.1v359.7c0,6.7,5.4,12.2,12.2,12.2h71.6c6.7,0,12.2-5.4,12.2-12.2V76.1   C384,69.4,378.6,64,371.8,64z" />
                            </g>
                        </svg>
                    </div>
                </div>
                <div class="relative flex w-full h-2 bg-gray-300 rounded-md" id="progressBar">
                    <div class="bg-blue-500 rounded-md h-2 absolute left-0 bottom-0 top-0" id="progressBarTrack"></div>
                </div>
                <div class="flex w-auto h-full space-x-2">
                    <div class="fill-blue-500 cursor-pointer" onclick="openFullscreen()" id="openFullscreenButton">
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" viewBox="0 0 14 14" class="h-6 w-6 fill-blue-500">
                            <title />
                            <desc />
                            <defs />
                            <g id="Page-1" stroke="none" stroke-width="1">
                                <g id="Core" transform="translate(-215.000000, -257.000000)">
                                    <g id="fullscreen" transform="translate(215.000000, 257.000000)">
                                        <path d="M2,9 L0,9 L0,14 L5,14 L5,12 L2,12 L2,9 L2,9 Z M0,5 L2,5 L2,2 L5,2 L5,0 L0,0 L0,5 L0,5 Z M12,12 L9,12 L9,14 L14,14 L14,9 L12,9 L12,12 L12,12 Z M9,0 L9,2 L12,2 L12,5 L14,5 L14,0 L9,0 L9,0 Z"
                                            id="Shape" />
                                    </g>
                                </g>
                            </g>
                        </svg>
                    </div>
                    <div class="fill-blue-500 cursor-pointer hidden" onclick="closeFullscreen()" id="closeFullscreenButton">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 96 96" class="h-6 w-6">
                            <title />
                            <g>
                                <path d="M30,60H6A6,6,0,0,0,6,72H24V90a6,6,0,0,0,12,0V66A5.9966,5.9966,0,0,0,30,60Z" />
                                <path d="M90,60H66a5.9966,5.9966,0,0,0-6,6V90a6,6,0,0,0,12,0V72H90a6,6,0,0,0,0-12Z" />
                                <path d="M66,36H90a6,6,0,0,0,0-12H72V6A6,6,0,0,0,60,6V30A5.9966,5.9966,0,0,0,66,36Z" />
                                <path d="M30,0a5.9966,5.9966,0,0,0-6,6V24H6A6,6,0,0,0,6,36H30a5.9966,5.9966,0,0,0,6-6V6A5.9966,5.9966,0,0,0,30,0Z" />
                            </g>
                        </svg>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        let hostWelcomeScreen = document.getElementById("hostWelcomeScreen");
        let hostVideoScreen = document.getElementById("hostVideoScreen");
        let hostNavBar = document.getElementById("hostNavBar");
        let playVideoButton = document.getElementById("playVideoButton");
        let pauseVideoButton = document.getElementById("pauseVideoButton");
        let videoPlayer = document.getElementById("videoPlayer");
        let videoSelector = document.getElementById("videoSelector");
        let sessionIdCopyButton = document.getElementById("sessionIdCopyButton");
        let sessionIdPlaceholder = document.getElementById("sessionId");
        let progressBar = document.getElementById("progressBar");
        let progressBarTrack = document.getElementById("progressBarTrack");
        let openFullscreenButton = document.getElementById("openFullscreenButton");
        let closeFullscreenButton = document.getElementById("closeFullscreenButton");

        let nicknameInput = document.getElementById("nicknameInput");
        let messageInput = document.getElementById("messageInput");
        let messageList = document.getElementById("messageList");
        let chatBox = document.getElementById("chatBox");

        let socket = io();

        socket.emit("newSession");

        socket.on("newSessionId", (packet) => {
            let { sessionId, videos } = packet;

            socket.sessionId = sessionId;
            sessionIdPlaceholder.innerText = sessionId;

            videos.forEach((video) => {
                videoSelector.innerHTML += `<option value="${video.videoId}">${video.videoName}</option>`;
            });

            let syncTime = () => {
                socket.emit(sessionId, { event: "time-change", time: videoPlayer.currentTime });
            }

            socket.on(sessionId, (packet) => {
                if (packet.event) {
                    let event = packet.event;

                    switch (event) {
                        case "started-session":
                            socket.videoId = packet.videoId;

                            videoPlayer.src = "/video/" + packet.videoId;
                            videoPlayer.controls = false;
                            videoPlayer.load();

                            videoPlayer.addEventListener("progress", (event) => {
                                let progress = Math.floor(((videoPlayer.currentTime / videoPlayer.duration) * 100));

                                progressBarTrack.style.width = progress + "%";
                            });

                            videoPlayer.addEventListener("play", () => playVideo());
                            videoPlayer.addEventListener("pause", () => pauseVideo());

                            hostWelcomeScreen.classList.add("hidden");
                            hostVideoScreen.classList.remove("hidden");

                            syncTime();

                            break;

                        case "message":
                            messageList.innerHTML += `
                                <div class="flex flex-col w-full h-auto space-y-1">
                                    <div class="text-white font-bold">${packet.message.sender}</div>
                                    <div class="text-gray-400 font-normal break-words">${packet.message.content}</div>
                                </div>
                            `;

                            break;

                        case "play-video":
                            videoPlayer.currentTime = packet.time;
                            videoPlayer.play();

                            playVideoButton.classList.add("hidden");
                            pauseVideoButton.classList.remove("hidden");

                            hostNavBar.classList.add("hidden");

                            break;

                        case "pause-video":
                            videoPlayer.currentTime = packet.time;
                            videoPlayer.pause();

                            pauseVideoButton.classList.add("hidden");
                            playVideoButton.classList.remove("hidden");

                            hostNavBar.classList.add("hidden");

                            break;

                        case "time-changed":
                            videoPlayer.pause();
                            videoPlayer.currentTime = packet.time;
                            videoPlayer.play();

                            break;

                        default:
                            break;
                    }
                }
            });
        });

        let toggleNavBar = () => {
            hostNavBar.classList.toggle("hidden");
        }

        let playVideo = () => {
            if (videoPlayer.isPaused) videoPlayer.play();

            playVideoButton.classList.add("hidden");
            pauseVideoButton.classList.remove("hidden");

            socket.emit(socket.sessionId, { event: "play-video", time: videoPlayer.currentTime });

            hostNavBar.classList.add("hidden");
        }

        let pauseVideo = () => {
            if (!videoPlayer.isPaused) videoPlayer.pause();

            pauseVideoButton.classList.add("hidden");
            playVideoButton.classList.remove("hidden");

            socket.emit(socket.sessionId, { event: "pause-video", time: videoPlayer.currentTime });

            hostNavBar.classList.add("hidden");
        }

        let fullscreenElement = document.documentElement;

        let openFullscreen = () => {
            openFullscreenButton.classList.add("hidden");
            closeFullscreenButton.classList.remove("hidden");

            fullscreenElement.requestFullscreen();
        }

        let closeFullscreen = () => {
            closeFullscreenButton.classList.add("hidden");
            openFullscreenButton.classList.remove("hidden");

            document.exitFullscreen();
        }

        let copySessionId = () => {
            navigator.clipboard.writeText(sessionIdPlaceholder.innerText);

            sessionIdCopyButton.classList.add("text-green-700");

            setTimeout(() => {
                sessionIdCopyButton.classList.remove("text-green-700");
            }, 300);
        }

        let startSession = () => {
            if (videoSelector instanceof HTMLSelectElement) {
                socket.emit("startSession", { sessionId: sessionIdPlaceholder.innerText, videoId: videoSelector.options[videoSelector.selectedIndex].value });
            }
        }

        let sendMessage = () => {
            socket.emit(socket.sessionId, { event: "message", message: { content: messageInput.value, sender: nicknameInput.value, sessionId: socket.sessionId, videoId: socket.videoId } })
        }

        let toggleChat = () => {
            chatBox.classList.toggle("hidden");
        }
    </script>
</body>

</html>